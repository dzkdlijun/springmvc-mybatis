<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

    <!-- 配置自动扫描的包 -->
    <context:component-scan base-package="com.leeo.springdata">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation"
                                expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <!-- 配置数据源 -->
    <context:property-placeholder location="classpath:db.properties"/>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close" scope="singleton">
        <property name="username" value="${db.username}"/>
        <property name="password" value="${db.password}"/>
        <property name="driverClassName" value="${db.driver}"/>
        <property name="url" value="${db.url}"/>
        <!--<property name="validationQuery" value="select 1"/>-->
    </bean>

    <!-- 配置IPA的entityManagerFactory -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
        </property>
        <property name="packagesToScan" value="com.leeo.springdata"/>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL57InnoDBDialect</prop>
                <!--<prop key="hibernate.cache.use_second_level_cache">true</prop>-->
                <!--<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>-->
                <!--<prop key="hibernate.cache.use_query_cache">true</prop>-->
            </props>
        </property>
        <property name="sharedCacheMode" value="ENABLE_SELECTIVE"/>
    </bean>

    <!-- 配置事物 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!-- 配置基于注解的事物 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 配置基于接口的事物 -->
    <!--<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="false"/>-->

    <!-- 配置spring data -->
    <jpa:repositories base-package="com.leeo.springdata" entity-manager-factory-ref="entityManagerFactory">
    </jpa:repositories>

    <!-- start of 继承定时任务 -->
    <!-- 配置作业类 -->
    <bean name="task1" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="com.leeo.springdata.quartz.QuartzJob1"/>
        <property name="jobDataAsMap">
            <map>
                <entry key="timeout" value="0"/>
            </map>
        </property>
    </bean>

    <!-- 配置触发方式一：每隔一定时间执行一次 -->
    <bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
        <property name="jobDetail" ref="task1"/>
        <property name="startDelay" value="0"/> <!-- 首次执行延迟时间-->
        <property name="repeatInterval" value="2000"/> <!-- 每2秒执行一次-->
    </bean>

    <!-- 触发方式二：指定时间运行 -->
    <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="task1"/>
        <property name="cronExpression" value="0 09 18 * * ?"/>  <!-- 每天12：00运行 -->
    </bean>
    <!-- end of 继承定时任务 -->

    <!-- start of 不继承定时任务 -->
    <bean id="task2" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject"><bean class="com.leeo.springdata.quartz.QuartzJob2"/> </property>
        <property name="targetMethod" value="doJob"/>
        <property name="concurrent" value="false"/>
    </bean>

    <bean id="simpleTrigger2" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
        <property name="jobDetail" ref="task2"/>
        <property name="startDelay" value="0"/>
        <property name="repeatInterval" value="3000"/>
    </bean>

    <bean id="cronTrigger2" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="task2"/>
        <property name="cronExpression" value="0 26 10 * * ?"/>
    </bean>
    <!-- end of 不继承定时任务 -->

    <!-- 配置工厂调度 -->
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="simpleTrigger2"></ref>
                <ref bean="simpleTrigger"/>
            </list>
        </property>
    </bean>

    <!-- 配置文件实现spring-task定时任务 -->
    <task:scheduled-tasks>
        <task:scheduled ref="quartzJob3" method="doJob" fixed-rate="2000"/>
    </task:scheduled-tasks>
    <!-- end of 配置文件实现spring-task定时任务-->

    <!-- 开启注解定时任务配置 -->
    <task:annotation-driven scheduler="qbScheduler" mode="proxy"/>
    <task:scheduler id="qbScheduler" pool-size="10"/>
</beans>